"""
Convert the CP2K band structure output to CSV files
"""

import re
import argparse
from dataclasses import dataclass
from typing import List

SET_MATCH = re.compile(
    r"""
[ ]*
  SET: [ ]* (?P<setnr>\d+) [ ]*
  TOTAL [ ] POINTS: [ ]* (?P<totalpoints>\d+) [ ]*
  \n
(?P<content>
  [\s\S]*?(?=\n.*?[ ] SET|$)  # match everything until next 'SET' or EOL
)
""",
    re.VERBOSE,
)

SPOINTS_MATCH = re.compile(
    r"""
[ ]*
  POINT [ ]+ (?P<number>\d+) [ ]+ (?P<name>\S+) [ ]+ (?P<a>\S+) [ ]+ (?P<b>\S+) [ ]+ (?P<c>\S+)
""",
    re.VERBOSE,
)

POINTS_MATCH = re.compile(
    r"""
[ ]*
  Nr\. [ ]+ (?P<nr>\d+) [ ]+
  Spin [ ]+ (?P<spin>\d+) [ ]+
  K-Point [ ]+ (?P<a>\S+) [ ]+ (?P<b>\S+) [ ]+ (?P<c>\S+) [ ]*
  \n
[ ]* (?P<npoints>\d+) [ ]* \n
(?P<values>
  [\s\S]*?(?=\n.*?[ ] Nr|$)  # match everything until next 'Nr.' or EOL
)
""",
    re.VERBOSE,
)


@dataclass
class SpecialPoint:
    number: int
    name: str
    a: float
    b: float
    c: float


@dataclass
class Point:
    a: float
    b: float
    c: float
    values: List[float]


def specialpoints_gen(content):
    for match in SPOINTS_MATCH.finditer(content):
        yield SpecialPoint(int(match["number"]), match["name"], float(match["a"]), float(match["b"]), float(match["c"]))


def points_gen(content):
    for match in POINTS_MATCH.finditer(content):
        yield Point(float(match["a"]), float(match["b"]), float(match["c"]), [float(v) for v in match["values"].split()])


def set_gen(content):
    for match in SET_MATCH.finditer(content):
        yield (
            int(match["setnr"]),
            int(match["totalpoints"]),
            iter(specialpoints_gen(match["content"])),
            iter(points_gen(match["content"])),
        )


def cp2k_bs2csv():
    parser = argparse.ArgumentParser(
        description="""
    Convert the input from the given input file handle and write
    CSV output files based on the given pattern.
    """,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "bsfile", metavar="<bandstructure-file>", type=argparse.FileType("r"), help="the band structure file generated by CP2K"
    )
    parser.add_argument(
        "-p", "--output-pattern", help="The output pattern for the different set files", default="{bsfile.name}.set-{setnr}.csv"
    )
    args = parser.parse_args()

    for setnr, totalpoints, specialpoints, points in set_gen(args.bsfile.read()):
        filename = args.output_pattern.format(bsfile=args.bsfile, setnr=setnr)

        with open(filename, "w") as csvout:
            print(f"writing point set {filename} (total number of k-points: {totalpoints})")
            print("with the following special points:")

            for point in specialpoints:
                print(f"  {point.name:>8}: {point.a:10.8f}/{point.b:10.8f}/{point.c:10.8f}")

            for point in points:
                csvout.write(f"{point.a:10.8f} {point.b:10.8f} {point.c:10.8f}")
                for value in point.values:
                    csvout.write(f" {value:10.8f}")
                csvout.write("\n")
